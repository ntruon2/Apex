{"version":3,"sources":["logo.svg","blogs/components.js","lookup/components.js","App.js","serviceWorker.js","index.js"],"names":["BlogsComponent","props","textAreaRef","React","createRef","useState","newBlogs","setNewBlogs","className","onSubmit","event","preventDefault","newVal","current","value","tempNewBlogs","unshift","content","likes","id","ref","required","name","type","BlogsList","blogsInit","setBlogsInit","blogs","setBlogs","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","console","log","send","loadBlogs","alert","map","item","index","Blog","blog","ActionBtn","action","setLikes","userLike","setUserLike","actionDisplay","display","onClick","App","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","appEl","document","getElementById","ReactDOM","render","blogsEl","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b8632721.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {useEffect, useState}  from 'react'\r\n\r\nimport {loadBlogs} from '../lookup'\r\n\r\nexport function BlogsComponent(props) {\r\n    const textAreaRef = React.createRef()\r\n    const [newBlogs, setNewBlogs] = useState([])\r\n    const handleSubmit = (event) => {\r\n      event.preventDefault()\r\n      const newVal = textAreaRef.current.value\r\n      let tempNewBlogs = [...newBlogs]\r\n      // change this to a server side call\r\n      tempNewBlogs.unshift({\r\n        content: newVal,\r\n        likes: 0,\r\n        id: 12313\r\n      })\r\n      setNewBlogs(tempNewBlogs)\r\n      textAreaRef.current.value = ''\r\n    }\r\n    return <div className={props.className}>\r\n            <div className='col-12 mb-3'>\r\n              <form onSubmit={handleSubmit}>\r\n                <textarea ref={textAreaRef} required={true} className='form-control' name='blog'>\r\n\r\n                </textarea>\r\n                <button type='submit' className='btn btn-primary my-3'>Blog</button>\r\n            </form>\r\n            </div>\r\n        <BlogsList newBlogs={newBlogs} />\r\n    </div>\r\n}\r\n\r\nexport function BlogsList(props) {\r\n    const [blogsInit, setBlogsInit] = useState([])\r\n    const [blogs, setBlogs] = useState([])\r\n    useEffect(()=>{\r\n      const final = [...props.newBlogs].concat(blogsInit)\r\n      if (final.length !== blogs.length) {\r\n        setBlogs(final)\r\n      }\r\n    }, [props.newBlogs, blogs, blogsInit])\r\n\r\n    useEffect(() => {\r\n      const myCallback = (response, status) => {\r\n        if (status === 200){\r\n          setBlogsInit(response)\r\n        } else {\r\n          alert(\"There was an error\")\r\n        }\r\n      }\r\n      loadBlogs(myCallback)\r\n    }, [blogsInit])\r\n    return blogs.map((item, index)=>{\r\n      return <Blog blog={item} className='my-5 py-5 border bg-white text-dark' key={`${index}-{item.id}`} />\r\n    })\r\n  }\r\n\r\n\r\nexport function ActionBtn(props) {\r\n    const {blog, action} = props\r\n    const [likes, setLikes] = useState(blog.likes ? blog.likes : 0)\r\n    const [userLike, setUserLike] = useState(blog.userLike === true ? true : false)\r\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\r\n    const actionDisplay = action.display ? action.display : 'Action'\r\n\r\n    const handleClick = (event) => {\r\n      event.preventDefault()\r\n      if (action.type === 'like') {\r\n        if (userLike === true) {\r\n          // perhaps i Unlike it?\r\n          setLikes(likes - 1)\r\n          setUserLike(false)\r\n        } else {\r\n          setLikes(likes + 1)\r\n          setUserLike(true)\r\n        }\r\n\r\n      }\r\n    }\r\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\r\n    return <button className={className} onClick={handleClick}>{display}</button>\r\n  }\r\n\r\nexport function Blog(props) {\r\n    const {blog} = props\r\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\r\n    return <div className={className}>\r\n        <p>{blog.id} - {blog.content}</p>\r\n        <div className='btn btn-group'>\r\n          <ActionBtn blog={blog} action={{type: \"like\", display:\"Likes\"}}/>\r\n          <ActionBtn blog={blog} action={{type: \"unlike\", display:\"Unlike\"}}/>\r\n          <ActionBtn blog={blog} action={{type: \"reblog\", display:\"\"}}/>\r\n        </div>\r\n    </div>\r\n  }\r\n","export function loadBlogs(callback) {\r\n    const xhr = new XMLHttpRequest()\r\n    const method = 'GET' // \"POST\"\r\n    const url = \"http://localhost:8000/api/blogs/\"\r\n    const responseType = \"json\"\r\n    xhr.responseType = responseType\r\n    xhr.open(method, url)\r\n    xhr.onload = function() {\r\n      callback(xhr.response, xhr.status)\r\n    }\r\n    xhr.onerror = function (e) {\r\n      console.log(e)\r\n      callback({\"message\": \"The request was an error\"}, 400)\r\n    }\r\n    xhr.send()\r\n  }\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {BlogsComponent} from './blogs'\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <BlogsComponent />\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BlogsComponent} from './blogs'\nimport * as serviceWorker from './serviceWorker';\n\nconst appEl = document.getElementById('root')\nif (appEl) {\n    ReactDOM.render(<App />, appEl);\n}\nconst blogsEl = document.getElementById(\"ApexGaming\")\nif (blogsEl) {\n    ReactDOM.render(<BlogsComponent />, blogsEl);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}